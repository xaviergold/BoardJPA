#DB 설정
#spring.datasource.driver-class-name=oracle.jdbc.driver.OracleDriver
#spring.datasource.url=jdbc:oracle:thin:@localhost:1521:xe
#spring.datasource.username=springjpa
#spring.datasource.password=12345
spring.datasource.hikari.driver-class-name=oracle.jdbc.driver.OracleDriver
spring.datasource.hikari.jdbc-url=jdbc:oracle:thin:@localhost:1521:xe
spring.datasource.hikari.username=springjpa
spring.datasource.hikari.password=12345
spring.datasource.hikari.connection-test-query=SELECT sysdate FROM DUAL

#개발 환경 설정
spring.devtools.livereload.enabled=true
spring.thymeleaf.cache=false

#JPA 설정
#ddl-auto 옵션 종류
#create : 엔티티로 등록된 클래스와 매핑되는 테이블을 자동으로 생성. 이미 테이블이 존재하고 있으면 기존 테이블을 삭제하고 테이블을 생성
#create-drop : 애플리케이션이 종료될 때 생성했던 테이블을 삭제
#update : 이미 테이블이 존재하고 있으면 그대로 두고 변경된 사항(컬럼 등)이 있으면 스키마를 변경. 테이블이 없으면 생성.
#validate : 테이블을 생성하지 않고 엔티티 클래스와 테이블이 정상적으로 매핑되는지만 검사
#none : 위의 4가지 속성을 제외한 나머지 경우에 해당. 
spring.jpa.database=oracle
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.format_sql=false
spring.jpa.show-sql=false

#OAuth2 설정
spring.security.oauth2.client.registration.google.client-id=711523001885-juqcv9l9a68vuln6fljl3on38hs6n9a7.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.client-secret=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
spring.security.oauth2.client.registration.google.scope=email

#파일 업로드 설정
spring.servlet.multipart.max-file-size=1024MB
spring.servlet.multipart.max-request-size=1024MB

#No Serializer error 방지
spring.jackson.serialization.fail-on-empty-beans=false

#내장 톰캣 설정 --> 값을 설정
tomcat.ajp.protocol=AJP/1.3
tomcat.ajp.port=8009
tomcat.ajp.enabled=true



